{"version":3,"file":"main.e5ac538b8db68e655338.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/IngredientsView.tsx","C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/UploadCertOrDisclosureBtn.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  ListItemIcon,\r\n  IconButton,\r\n  Box,\r\n  Typography,\r\n  makeStyles,\r\n  LinearProgress,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport SubdirectoryArrowRightIcon from \"@material-ui/icons/SubdirectoryArrowRight\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { insert } from \"../../../reviewer/common/utils\";\r\nimport { Ingredient } from \"../../../reviewer/common/types\";\r\nimport IngredientDialog, { IngredientDialogMode } from \"./IngredientDialog\";\r\nimport UploadCertOrDisclosureBtn from \"./UploadCertOrDisclosureBtn\";\r\n\r\nexport interface IngredientsViewProps {\r\n  productId: number;\r\n}\r\n\r\nexport default function IngredientsView({ productId }: IngredientsViewProps) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n\r\n  const load = () =>\r\n    axios\r\n      .post(`/api/client/product/${productId}/ingredients`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          setIngredients(response.data.reverse());\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve product ingredients.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve product ingredients.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n\r\n  useEffect(() => {\r\n    load();\r\n  }, []);\r\n\r\n  const handleIngredientAdd = (product: Ingredient) => {\r\n    // setIngredients([product, ...ingredients]);\r\n    load();\r\n  };\r\n\r\n  const handleIngredientUpdate = (product: Ingredient, i: number) => {\r\n    // const newIngredients = insert<Ingredient>(ingredients, i, product);\r\n    // setIngredients(newIngredients);\r\n    load();\r\n  };\r\n\r\n  const handleIngredientDelete = (productId: number) => {\r\n    setIngredients(ingredients.filter((p) => p.id != productId));\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* <Box className={classes.header}>\r\n        <Typography variant=\"h4\">Product Ingredients</Typography>\r\n        <IngredientDialog\r\n          productId={productId}\r\n          onIngredientUpdate={handleIngredientAdd}\r\n          mode={IngredientDialogMode.ADD}\r\n        />\r\n      </Box> */}\r\n      {(loading && <CircularProgress />) || (\r\n        <List className={classes.ingredientList}>\r\n          {(ingredients.length &&\r\n            ingredients.map((ingredient: Ingredient, i: number) => (\r\n              <IngredientItem\r\n                key={ingredient.id}\r\n                divider={i != ingredients.length - 1}\r\n                ingredient={ingredient}\r\n                onIngredientUpdate={(ingredient: Ingredient) =>\r\n                  handleIngredientUpdate(ingredient, i)\r\n                }\r\n                onIngredientDelete={handleIngredientDelete}\r\n              />\r\n            ))) || (\r\n            <Alert severity=\"info\">This product has no ingredients.</Alert>\r\n          )}\r\n        </List>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport interface IngredientItemProps {\r\n  divider?: boolean;\r\n  ingredient: Ingredient;\r\n  onIngredientUpdate: (ingredient: Ingredient) => void;\r\n  onIngredientDelete: (ingredientId: number) => void;\r\n  breadcrumbsList?: string[];\r\n}\r\n\r\nexport function IngredientItem({\r\n  divider = false,\r\n  ingredient,\r\n  onIngredientUpdate,\r\n  onIngredientDelete,\r\n  breadcrumbsList,\r\n}: IngredientItemProps) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleIngredientItemClick = () => setOpen(true);\r\n\r\n  const handleIngredientDialogClose = () => setOpen(false);\r\n\r\n  const _onIngredientUpdate = (ingredient: Ingredient) => {\r\n    setOpen(false);\r\n    onIngredientUpdate(ingredient);\r\n  };\r\n\r\n  const handleIngredientDelete = () => {\r\n    const answer = window.confirm(\r\n      \"Are you sure you would like to delete this ingredient?\"\r\n    );\r\n\r\n    if (!answer) return;\r\n\r\n    setLoading(true);\r\n\r\n    axios\r\n      .delete(\"/api/client/ingredient/\" + ingredient.id)\r\n      .then(async (response: any) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          onIngredientDelete(ingredient.id as number);\r\n          enqueueSnackbar(\"Ingredient deleted successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else\r\n          enqueueSnackbar(\r\n            \"Failed to delete ingredient. Contact the developer.\",\r\n            {\r\n              variant: \"error\",\r\n            }\r\n          );\r\n      })\r\n      .catch((e: any) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to delete ingredient. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListItem\r\n        key={ingredient.id}\r\n        // divider={divider}\r\n        button\r\n        onClick={handleIngredientItemClick}\r\n      >\r\n        {loading && <LinearProgress />}\r\n        <ListItemIcon>\r\n          <SubdirectoryArrowRightIcon />\r\n        </ListItemIcon>\r\n        <ListItemText\r\n          primary={`${ingredient.name} (${ingredient.manufacturer?.name})`}\r\n          // secondary={ingredient.manufacturer?.name}\r\n          // secondary={moment(ingredient.date).format(\"DD/MM/YY\")}\r\n        />\r\n        <ListItemSecondaryAction>\r\n          <UploadCertOrDisclosureBtn manufacturerId={ingredient.manufacturer?.id as number} />\r\n          <IconButton edge=\"end\" onClick={handleIngredientDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <IngredientDialog\r\n        mode={IngredientDialogMode.EDIT}\r\n        open={open}\r\n        edit={ingredient}\r\n        onClose={handleIngredientDialogClose}\r\n        onIngredientUpdate={_onIngredientUpdate}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  ingredientList: {\r\n    // overflowY: \"auto\",\r\n    // maxHeight: \"calc(100vh - 239px)\",\r\n    marginLeft: 15,\r\n  },\r\n}));\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { Box, List, CircularProgress, Tooltip } from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoadingButton from \"../../../reviewer/common/LoadingButton\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\n\r\nimport { MAX_ALLOWED_SIZE } from \"../../../../config\";\r\nimport {\r\n  ProductDocument,\r\n  ProductDocumentType,\r\n  Document,\r\n} from \"../../../reviewer/common/types\";\r\n\r\nexport interface UploadCertOrDisclosureBtnProps {\r\n  manufacturerId: number;\r\n}\r\n\r\nexport default function UploadCertOrDisclosureBtn({\r\n  manufacturerId,\r\n}: UploadCertOrDisclosureBtnProps) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [doc, setDoc] = useState<ProductDocument | null>(null);\r\n  const inputRef = useRef(null);\r\n  const updateInputRef = useRef(null);\r\n  const documentCopy = (document && Object.assign({}, document)) || null;\r\n  // const [file, setFile] = useState<Document | null>(documentCopy);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(`/api/client/manufacturer/${manufacturerId}/documents`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          console.log(response.data);\r\n          setDoc(response.data[0]);\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve manufacturer spec sheet.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve manufacturer spec sheet.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const handleClick = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleDocumentUploadButton = () => {\r\n    // @ts-ignore\r\n    if (inputRef) inputRef.current.click();\r\n  };\r\n\r\n  const handleDocumentUpdateButton = () => {\r\n    // @ts-ignore\r\n    if (inputRef) updateInputRef.current.click();\r\n  };\r\n\r\n  // const setDocumentHandler = (document: Document) => {\r\n  //   setDoc(document as ProductDocument);\r\n  //   console.log(doc);\r\n  // };\r\n\r\n  // const updateDocHandler = (doc: Document, documentId: number) => {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"document\", doc);\r\n\r\n  //   return axios.post(`/api/client/manufacturer/document/${documentId}`, formData, {\r\n  //     headers: {\r\n  //       \"Content-Type\": \"multipart/form-data\",\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // const deleteDocHandler = (documentId: number) => {\r\n  //   setDoc(doc.filter((d) => d.id !== documentId));\r\n\r\n  //   return axios.delete(\"/api/client/manufacturer/document/\" + documentId);\r\n  // };\r\n\r\n  const handleDocumentUpload = (e: any) => {\r\n    const _doc = e.target.files[0] as Document;\r\n\r\n    if (!_doc) return;\r\n\r\n    if (_doc.size > MAX_ALLOWED_SIZE) {\r\n      alert(\"File exceeds the maximum allowed size of 10 MB.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const formData = new FormData();\r\n    formData.append(\"document\", _doc);\r\n    formData.append(\"type\", ProductDocumentType.SPEC_SHEETS.toString());\r\n\r\n    axios\r\n      .post(`/api/client/manufacturer/${manufacturerId}/document`, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          // console.log(response.data);\r\n          // setDoc(response.data);\r\n          // setDocument(response.data);\r\n          setDoc(response.data);\r\n          enqueueSnackbar(`Uploaded manufacturer spec successfully.`, {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(`Product spec sheet upload failed.`, {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(`Product spec sheet upload failed.`, {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  if (loading) return <CircularProgress />;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"file\"\r\n        name=\"file\"\r\n        id={Math.random().toString()}\r\n        accept=\"application/msword, application/pdf\"\r\n        data-title=\"Upload\"\r\n        // multiple\r\n        // data-multiple-caption=\"{count} files selected\"\r\n        onChange={handleDocumentUpload}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      {/* <input\r\n        ref={updateInputRef}\r\n        type=\"file\"\r\n        name=\"updatedFile\"\r\n        id={Math.random().toString()}\r\n        accept=\"application/msword, application/pdf\"\r\n        data-title=\"Upload\"\r\n        onChange={handleUpdateDocument}\r\n        style={{ display: \"none\" }}\r\n      /> */}\r\n      <Tooltip title=\"A manufacturer specification sheet is a technical document that outlines the features of a manufacturer in detail. It explains and describes the manufacturer, what it is, what it does, what its components are and any special features it has. It also provides any other important additional information such as hazard and allergy warnings.\">\r\n        <LoadingButton\r\n          loading={loading}\r\n          done={doc != null}\r\n          onClick={handleDocumentUploadButton}\r\n          startIcon={<CloudUploadIcon />}\r\n          variant=\"contained\"\r\n        >\r\n          Halal Certificate / Disclosure Statement\r\n        </LoadingButton>\r\n      </Tooltip>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAaA;AACA;AACA;AACA;AAIA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAGA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AA9EA;AACA;;;AADA;AAuFA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAIA;AADA;AAIA;AAEA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AAGA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AA5FA;AAOA;;;AAPA;AA6FA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA/JA;AAGA;;;AAHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}