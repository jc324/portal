{"version":3,"file":"main.f85b9c10e6b6f923efe2.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/Stepper.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Box,\r\n  Grid,\r\n  LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport Stepper from \"@material-ui/core/Stepper\";\r\nimport Step from \"@material-ui/core/Step\";\r\nimport StepLabel from \"@material-ui/core/StepLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { ReviewRequest, Facility } from \"../../../reviewer/common/types\";\r\nimport PromptDialog from \"../../../reviewer/common/PromptDialog\";\r\nimport PreStep from \"./PreStep\";\r\nimport SubmitStep from \"./SubmitStep\";\r\nimport SuccessfulSubmissionStep from \"./SuccessfulSubmissionStep\";\r\nimport StepOne from \"./Step_01\";\r\nimport StepTwo from \"./Step_02\";\r\nimport StepThree from \"./Step_03\";\r\nimport StepFour from \"./Step_04\";\r\nimport StepFive from \"./Step_05\";\r\nimport StepSix from \"./Step_06\";\r\nimport StepSeven from \"./Step_07\";\r\nimport StepEight from \"./Step_08\";\r\nimport StepNine from \"./Step_09\";\r\n\r\nexport default function HorizontalLinearStepper() {\r\n  const classes = useStyles();\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [reviewRequest, setReviewRequest] = useState<ReviewRequest | null>(\r\n    null\r\n  );\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [skipped, setSkipped] = useState(new Set<number>());\r\n  const [facilityStepValues, setFacilityStepValues] =\r\n    useState<Facility>(defaults);\r\n  const steps = getStepTitles(reviewRequest?.type as string);\r\n  const [promptOpen, setPromptOpen] = useState<boolean>(false);\r\n  const [confirm, setConfirm] = useState<boolean>(false);\r\n  const [greenLight, setGreenLight] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      // if editing\r\n      setLoading(true);\r\n      axios\r\n        .post(`/api/client/review-request/${id}`)\r\n        .then(async (response) => {\r\n          setLoading(false);\r\n          // console.log(response.data);\r\n          setReviewRequest(response.data);\r\n          setActiveStep(response.data.current_step_index);\r\n        })\r\n        .catch((e) => {\r\n          // @TODO handle\r\n          console.error(e);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const setRequestType = (type: string) => {\r\n    setReviewRequest({ ...reviewRequest, type } as ReviewRequest);\r\n    console.log(reviewRequest);\r\n  };\r\n\r\n  const handleFacilitySelect = (id: number) => {\r\n    setReviewRequest({ ...reviewRequest, facility_id: id } as ReviewRequest);\r\n  };\r\n  const updateReviewRequest = (\r\n    current_step_index: number\r\n  ): Promise<AxiosResponse<any>> => {\r\n    // if (!reviewRequest) return;\r\n    setLoading(true);\r\n\r\n    let data: ReviewRequest = {\r\n      ...(reviewRequest as ReviewRequest),\r\n      current_step_index,\r\n    };\r\n\r\n    return axios.put(`/api/client/review-request/${reviewRequest?.id}`, data);\r\n  };\r\n\r\n  const isStepOptional = (step: number) => {\r\n    return step === 1;\r\n  };\r\n\r\n  const isStepSkipped = (step: number) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  const handleSubmission = () => {\r\n    setLoading(true);\r\n\r\n    let data: ReviewRequest = {\r\n      ...(reviewRequest as ReviewRequest),\r\n      current_step_index: 0,\r\n      status: \"IN_REVIEW\",\r\n    };\r\n\r\n    axios\r\n      .put(`/api/client/review-request/${reviewRequest?.id}`, data)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        // navigate(`/client/requests`);\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        enqueueSnackbar(\"Review request submitted successfully.\", {\r\n          variant: \"success\",\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to submit review request. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const createReviewRequest = () => {\r\n    let data = { type: reviewRequest?.type || \"NEW_FACILITY_AND_PRODUCTS\" };\r\n\r\n    setLoading(true);\r\n    axios\r\n      .post(`/api/client/review-request/new`, data)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        console.log(response.data);\r\n        setReviewRequest(response.data);\r\n        setActiveStep(1);\r\n      })\r\n      .catch((e) => {\r\n        // @TODO handle\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to create review request. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const handleFacilityUpdate = (): Promise<AxiosResponse<any>> => {\r\n    setLoading(true);\r\n\r\n    return axios.put(\r\n      `/api/client/facility/${reviewRequest?.facility_id}`,\r\n      facilityStepValues\r\n    );\r\n\r\n    // .then(async (response) => {\r\n    //   setLoading(false);\r\n    //   if (response.status == 200 || response.status == 201) {\r\n    //     enqueueSnackbar(\"Facility updated successfully.\", {\r\n    //       variant: \"success\",\r\n    //     });\r\n    //   } else {\r\n    //     console.log(response);\r\n    //     enqueueSnackbar(\"Failed to update facility. Contact the developer.\", {\r\n    //       variant: \"error\",\r\n    //     });\r\n    //   }\r\n    // })\r\n    // .catch((e) => {\r\n    //   console.error(e);\r\n    //   setLoading(false);\r\n    //   enqueueSnackbar(\r\n    //     \"Failed to update facility. Check your network connection and try again.\",\r\n    //     {\r\n    //       variant: \"error\",\r\n    //     }\r\n    //   );\r\n    // });\r\n  };\r\n\r\n  const handleNext = (confirm: boolean = false) => {\r\n    if (!confirm) {\r\n      if (\r\n        (reviewRequest?.type === \"NEW_PRODUCTS\" && activeStep == 2) ||\r\n        (reviewRequest?.type === \"NEW_FACILITY_AND_PRODUCTS\" && activeStep == 8)\r\n      ) {\r\n        setPromptOpen(true);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!(reviewRequest as ReviewRequest).id) {\r\n      console.log(\"creating\");\r\n      createReviewRequest();\r\n      return;\r\n    }\r\n\r\n    let nextFunctionCallback = updateReviewRequest(activeStep + 1);\r\n\r\n    if (\r\n      (reviewRequest?.type === \"NEW_FACILITY\" && activeStep == 1) ||\r\n      (reviewRequest?.type === \"NEW_FACILITY_AND_PRODUCTS\" && activeStep == 1)\r\n    ) {\r\n      nextFunctionCallback = handleFacilityUpdate();\r\n    }\r\n\r\n    nextFunctionCallback\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        // console.log(response.data);\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n          newSkipped = new Set(newSkipped.values());\r\n          newSkipped.delete(activeStep);\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped(newSkipped);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to move to next step. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const handleBack = () => {\r\n    updateReviewRequest(activeStep - 1)\r\n      ?.then(async (response) => {\r\n        setLoading(false);\r\n        // console.log(response.data);\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to move to previous step. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <PromptDialog\r\n        open={promptOpen}\r\n        onOk={() => {\r\n          handleNext(true);\r\n          setPromptOpen(false);\r\n        }}\r\n        onCancel={() => setPromptOpen(false)}\r\n        message=\"Some products and ingredients are missing documents. Are you sure you would like to proceed to the next step?\"\r\n      />\r\n      <Grid item lg={8} md={6} xs={12}>\r\n        <Card className={classes.root}>\r\n          {loading && <LinearProgress />}\r\n          <CardHeader title={<strong children=\"Request\" />} />\r\n          <Divider />\r\n\r\n          <Box\r\n            minWidth={800}\r\n            style={{\r\n              paddingLeft: 20,\r\n              paddingRight: 20,\r\n            }}\r\n          >\r\n            {activeStep === steps.length ? (\r\n              <div>\r\n                <Typography className={classes.instructions}>\r\n                  All steps completed - you&apos;re finished\r\n                </Typography>\r\n                <Button onClick={handleReset} className={classes.button}>\r\n                  Reset\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  flexDirection: \"column\",\r\n                  height: \"100%\",\r\n                }}\r\n              >\r\n                <Box\r\n                  style={{\r\n                    height: \"calc(100vh - 228px)\",\r\n                    overflowY: \"auto\",\r\n                    overflowX: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.instructions}>\r\n                    {getStepContent(\r\n                      activeStep,\r\n                      reviewRequest as ReviewRequest,\r\n                      setRequestType,\r\n                      handleFacilitySelect,\r\n                      facilityStepValues,\r\n                      setFacilityStepValues,\r\n                      handleSubmission,\r\n                      setGreenLight\r\n                    )}\r\n                  </Typography>\r\n                </Box>\r\n                <div style={{ alignSelf: \"flex-end\", padding: 20 }}>\r\n                  {activeStep !== 0 && (\r\n                    <Button\r\n                      disabled={\r\n                        activeStep === 1 ||\r\n                        (activeStep === 2 &&\r\n                          reviewRequest?.type === \"NEW_PRODUCTS\") ||\r\n                        activeStep === steps.length - 1\r\n                      }\r\n                      onClick={handleBack}\r\n                      className={classes.button}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                  {/* {isStepOptional(activeStep) && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  // onClick={handleSkip}\r\n                  className={classes.button}\r\n                >\r\n                  Skip\r\n                </Button>\r\n              )} */}\r\n                  {activeStep === steps.length - 1 ||\r\n                    (activeStep === steps.length - 2 && (\r\n                      <span />\r\n                      // <Button\r\n                      //   variant=\"contained\"\r\n                      //   color=\"primary\"\r\n                      //   onClick={handleSubmission}\r\n                      //   className={classes.button}\r\n                      // >\r\n                      //   Submit Request\r\n                      // </Button>\r\n                    )) || (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleNext(false)}\r\n                        className={classes.button}\r\n                        disabled={!greenLight || !reviewRequest?.type}\r\n                      >\r\n                        Next\r\n                      </Button>\r\n                    )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Box>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item lg={4} md={6} xs={12}>\r\n        <Stepper\r\n          activeStep={activeStep}\r\n          style={{ paddingTop: 30, backgroundColor: \"transparent\" }}\r\n          orientation=\"vertical\"\r\n        >\r\n          {steps.map((label, index) => {\r\n            const stepProps: { completed?: boolean } = {};\r\n            const labelProps: { optional?: React.ReactNode } = {};\r\n            // if (isStepOptional(index)) {\r\n            //   labelProps.optional = (\r\n            //     <Typography variant=\"caption\">Optional</Typography>\r\n            //   );\r\n            // }\r\n            if (isStepSkipped(index)) {\r\n              stepProps.completed = false;\r\n            }\r\n            return (\r\n              <Step key={label} {...stepProps}>\r\n                <StepLabel {...labelProps}>\r\n                  <strong>{label}</strong>\r\n                </StepLabel>\r\n              </Step>\r\n            );\r\n          })}\r\n        </Stepper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction getStepTitles(reviewType: string) {\r\n  let steps = [\"Select request type\"];\r\n\r\n  if (\r\n    reviewType === \"NEW_FACILITY\" ||\r\n    reviewType === \"NEW_FACILITY_AND_PRODUCTS\"\r\n  )\r\n    steps = [\r\n      ...steps,\r\n      \"Facility details\",\r\n      \"Legal Business Documents\",\r\n      \"Traceability Plan\",\r\n      \"Flowchart of Processing\",\r\n      \"Sanitation Standard Operating Procedure\",\r\n      \"Recall Plan\",\r\n      \"Pest Control\",\r\n    ];\r\n\r\n  if (reviewType === \"NEW_PRODUCTS\") steps.push(\"Select Facility\");\r\n\r\n  if (\r\n    reviewType === \"NEW_PRODUCTS\" ||\r\n    reviewType === \"NEW_FACILITY_AND_PRODUCTS\"\r\n  )\r\n    steps.push(\"Finished Products\");\r\n\r\n  // final step\r\n  steps.push(\"Submit Request\");\r\n  steps.push(\"Success\");\r\n\r\n  return steps;\r\n}\r\n\r\nconst getStepContent = (\r\n  step: number,\r\n  reviewRequest: ReviewRequest,\r\n  setRequestType: (type: string) => void,\r\n  handleFacilitySelect: (id: number) => void,\r\n  facilityStepValues: Facility,\r\n  setFacilityStepValues: React.Dispatch<React.SetStateAction<Facility>>,\r\n  onSubmit: () => void = () => {},\r\n  setGreenLight: React.Dispatch<React.SetStateAction<boolean>>\r\n) => {\r\n  // return <SuccessfulSubmissionStep />;\r\n  if (step === 0)\r\n    return (\r\n      <PreStep\r\n        requestType={reviewRequest?.type as string}\r\n        setRequestType={setRequestType}\r\n      />\r\n    );\r\n\r\n  if (reviewRequest.type === \"NEW_FACILITY\")\r\n    switch (step) {\r\n      case 1:\r\n        return (\r\n          <StepOne\r\n            facilityId={reviewRequest.facility_id as number}\r\n            values={facilityStepValues}\r\n            setValues={setFacilityStepValues}\r\n          />\r\n        );\r\n      case 2:\r\n        return <StepTwo facilityId={reviewRequest.facility_id as number} setGreenLight={setGreenLight} />;\r\n      case 3:\r\n        return <StepThree facilityId={reviewRequest.facility_id as number} />;\r\n      case 4:\r\n        return <StepFour facilityId={reviewRequest.facility_id as number} />;\r\n      case 5:\r\n        return <StepFive facilityId={reviewRequest.facility_id as number} />;\r\n      case 6:\r\n        return <StepSix facilityId={reviewRequest.facility_id as number} />;\r\n      case 7:\r\n        return <StepSeven facilityId={reviewRequest.facility_id as number} />;\r\n      case 8:\r\n        return <SubmitStep onSubmit={onSubmit} />;\r\n      case 9:\r\n        return <SuccessfulSubmissionStep />;\r\n      default:\r\n        return \"Unknown step\";\r\n    }\r\n\r\n  if (reviewRequest.type === \"NEW_PRODUCTS\")\r\n    switch (step) {\r\n      case 1:\r\n        return (\r\n          <StepNine\r\n            selected={reviewRequest?.facility_id || 0}\r\n            handleFacilitySelect={handleFacilitySelect}\r\n          />\r\n        );\r\n      case 2:\r\n        return <StepEight reviewRequest={reviewRequest} />;\r\n      case 3:\r\n        return <SubmitStep onSubmit={onSubmit} />;\r\n      case 4:\r\n        return <SuccessfulSubmissionStep />;\r\n      default:\r\n        return \"Unknown step\";\r\n    }\r\n\r\n  if (reviewRequest.type === \"NEW_FACILITY_AND_PRODUCTS\")\r\n    switch (step) {\r\n      case 1:\r\n        return (\r\n          <StepOne\r\n            facilityId={reviewRequest.facility_id as number}\r\n            values={facilityStepValues}\r\n            setValues={setFacilityStepValues}\r\n          />\r\n        );\r\n      case 2:\r\n        return <StepTwo facilityId={reviewRequest.facility_id as number} />;\r\n      case 3:\r\n        return <StepThree facilityId={reviewRequest.facility_id as number} />;\r\n      case 4:\r\n        return <StepFour facilityId={reviewRequest.facility_id as number} />;\r\n      case 5:\r\n        return <StepFive facilityId={reviewRequest.facility_id as number} />;\r\n      case 6:\r\n        return <StepSix facilityId={reviewRequest.facility_id as number} />;\r\n      case 7:\r\n        return <StepSeven facilityId={reviewRequest.facility_id as number} />;\r\n      case 8:\r\n        return <StepEight reviewRequest={reviewRequest} />;\r\n      case 9:\r\n        return <SubmitStep onSubmit={onSubmit} />;\r\n      case 10:\r\n        return <SuccessfulSubmissionStep />;\r\n      default:\r\n        return \"Unknown step\";\r\n    }\r\n};\r\n\r\nconst defaults: Facility = {\r\n  id: null,\r\n  review_request_id: null,\r\n  category_id: 1,\r\n  name: \"\",\r\n  address: \"\",\r\n  country: \"\",\r\n  state: \"\",\r\n  city: \"\",\r\n  zip: \"\",\r\n  updated_at: \"\",\r\n  created_at: \"\",\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n    },\r\n    button: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    instructions: {\r\n      marginTop: theme.spacing(1),\r\n      marginBottom: theme.spacing(1),\r\n      paddingTop: 20,\r\n    },\r\n  })\r\n);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AAEA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAHA;AAMA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sourceRoot":""}