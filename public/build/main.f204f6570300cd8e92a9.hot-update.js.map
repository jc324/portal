{"version":3,"file":"main.f204f6570300cd8e92a9.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/AddProductDialog.tsx","C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/IngredientDialog.tsx","C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/IngredientsView.tsx","C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/ManufacturerDocs.tsx","C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/Step_08.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  LinearProgress,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Slide,\r\n  Grid,\r\n  Typography,\r\n  TextField,\r\n  Box,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nimport { Ingredient, Product } from \"../../../reviewer/common/types\";\r\nimport Breadcrumbs from \"../../../reviewer/common/Breadcrumbs\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport enum AddProductDialogMode {\r\n  EDIT,\r\n  ADD,\r\n}\r\n\r\nexport interface AddProductDialogProps {\r\n  onProductAdd: (product: Product) => void;\r\n  reviewRequestId: number;\r\n  facilityId: number;\r\n}\r\n\r\nexport default function AddProductDialog({\r\n  onProductAdd,\r\n  reviewRequestId,\r\n  facilityId,\r\n}: AddProductDialogProps) {\r\n  const classes = useStyles();\r\n  const [_open, _setOpen] = React.useState(false); // internal\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [values, setValues] = useState<Product>(defaults);\r\n\r\n  // inject appropriate review_request and facility IDs\r\n  values.review_request_id = reviewRequestId as number;\r\n  values.facility_id = facilityId as number;\r\n\r\n  const addProductHandler = () => {\r\n    setLoading(true);\r\n    axios\r\n      .put(`/api/client/product`, values)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          onProductAdd(response.data);\r\n          setValues(defaults);\r\n          _setOpen(false);\r\n          enqueueSnackbar(\"Product added successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to add product. Contact the developer.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to add product. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const handleChange = (event: any) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    _setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    _setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleClickOpen}>\r\n        Add Product\r\n      </Button>\r\n      <Dialog\r\n        keepMounted\r\n        open={_open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n        aria-labelledby=\"add-product-form-dialog-title\"\r\n      >\r\n        {loading && <LinearProgress />}\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          <Typography variant=\"h4\">Add Product</Typography>\r\n        </DialogTitle>\r\n        <DialogContent classes={{ root: classes.dialogContentRoot }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Product name\"\r\n                name=\"name\"\r\n                onChange={handleChange}\r\n                required\r\n                value={values.name}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                onChange={handleChange}\r\n                value={values.description}\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={4}\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12} style={{ marginBottom: 15 }}>\r\n              <CategorySelector\r\n                categoriesSource=\"/api/client/product/categories\"\r\n                onSelect={handleCategorySelect}\r\n                selected={values.category_id}\r\n              />\r\n            </Grid> */}\r\n          </Grid>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button\r\n            onClick={addProductHandler}\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n          >\r\n            Add Product\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nconst defaults: Product = {\r\n  id: null,\r\n  review_request_id: null,\r\n  facility_id: null,\r\n  category_id: 1,\r\n  name: \"\",\r\n  description: \"\",\r\n  preview_image: \"\",\r\n  date: Date.now(),\r\n  ingredients: [] as Ingredient[],\r\n};\r\n\r\nfunction TabPanel(props: any) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box\r\n          p={3}\r\n          style={{ width: \"100%\", display: \"flex\", justifyContent: \"center\" }}\r\n        >\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  dialogContentRoot: {\r\n    overflowY: \"hidden\",\r\n  },\r\n}));\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Slide,\r\n  Paper,\r\n  LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport Draggable from \"react-draggable\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport { Ingredient, Manufacturer } from \"../../../reviewer/common/types\";\r\nimport ManufacturerDocs from \"./ManufacturerDocs\";\r\nimport ManufacturerSelector from \"../../../reviewer/clients/client/ManufacturerSelector\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst defaults: Ingredient = {\r\n  id: null,\r\n  review_request_id: null,\r\n  client_id: null,\r\n  product_id: null,\r\n  name: \"\",\r\n  manufacturer: null,\r\n  description: \"\",\r\n  recommendation: \"\",\r\n  source: \"\",\r\n};\r\n\r\nexport enum IngredientDialogMode {\r\n  EDIT,\r\n  ADD,\r\n}\r\n\r\nexport interface IngredientDialogProps {\r\n  onIngredientUpdate: (product: Ingredient) => void;\r\n  productId?: number;\r\n  reviewRequestId?: number;\r\n  mode: IngredientDialogMode;\r\n  open?: boolean;\r\n  onClose?: () => void;\r\n  edit?: Ingredient;\r\n}\r\n\r\nexport default function IngredientDialog({\r\n  onIngredientUpdate,\r\n  reviewRequestId,\r\n  productId,\r\n  mode,\r\n  open = false,\r\n  onClose,\r\n  edit,\r\n}: IngredientDialogProps) {\r\n  if (edit) edit.manufacturer_name = edit.manufacturer?.name;\r\n\r\n  const [_open, _setOpen] = React.useState(false); // internal\r\n  const [values, setValues] = useState<Ingredient>(\r\n    (mode === IngredientDialogMode.ADD && defaults) || (edit as Ingredient)\r\n  );\r\n  const ingredientId = edit?.id as number;\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // inject appropriate facility id\r\n  values.product_id = productId as number;\r\n\r\n  const addIngredientHandler = (ingredient: Ingredient) => {\r\n    // inject\r\n    values.review_request_id = reviewRequestId as number;\r\n    console.log(ingredient);\r\n    setLoading(true);\r\n    axios\r\n      .put(`/api/client/ingredient`, ingredient)\r\n      .then(async (response) => {\r\n        console.log(response.data);\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          onIngredientUpdate(response.data);\r\n          setValues(defaults);\r\n          _setOpen(false);\r\n          enqueueSnackbar(\"Ingredient added successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to add ingredient. Contact the developer.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to add ingredient. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const updateIngredientHandler = (ingredient: Ingredient) => {\r\n    // if (mode === IngredientDialogMode.ADD)\r\n    //   ingredient.manufacturer_name = ingredient.manufacturer?.name;\r\n    setLoading(true);\r\n    axios\r\n      .put(`/api/client/ingredient/${ingredient.id}`, ingredient)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          onIngredientUpdate(response.data);\r\n          _setOpen(false);\r\n          enqueueSnackbar(\"Ingredient updated successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\r\n            \"Failed to update ingredient. Contact the developer.\",\r\n            {\r\n              variant: \"error\",\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to update ingredient. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const handleIngredientUpdate = () => {\r\n    if (mode === IngredientDialogMode.ADD) addIngredientHandler(values);\r\n    else updateIngredientHandler(values);\r\n    // _setOpen(false);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    _setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    _setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {mode === IngredientDialogMode.ADD && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          startIcon={<AddIcon />}\r\n          style={{ marginRight: 15 }}\r\n          onClick={handleClickOpen}\r\n        >\r\n          Ingredient\r\n        </Button>\r\n      )}\r\n      <Dialog\r\n        keepMounted\r\n        open={(mode === IngredientDialogMode.ADD && _open) || open}\r\n        onClose={(mode === IngredientDialogMode.ADD && handleClose) || onClose}\r\n        TransitionComponent={Transition}\r\n        maxWidth=\"sm\"\r\n        PaperComponent={PaperComponent}\r\n        aria-labelledby=\"draggable-dialog-title\"\r\n      >\r\n        {loading && <LinearProgress />}\r\n        <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n          <Typography variant=\"h4\">\r\n            {(mode === IngredientDialogMode.ADD && \"Add\") || \"Edit\"} Ingredient\r\n          </Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {(mode === IngredientDialogMode.ADD &&\r\n              \"Fill out this form to add a new ingredient to this product.\") ||\r\n              \"Fill out this form to update this ingredient.\"}\r\n          </DialogContentText>\r\n          <IngredientDetails\r\n            values={values}\r\n            setValues={setValues}\r\n            mode={mode}\r\n          />\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleIngredientUpdate}\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n          >\r\n            {(mode === IngredientDialogMode.ADD && \"Add\") || \"Update\"}{\" \"}\r\n            Ingredient\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport interface IngredientDetailsProps {\r\n  values: Ingredient;\r\n  setValues: React.Dispatch<React.SetStateAction<Ingredient>>;\r\n  mode?: IngredientDialogMode;\r\n}\r\n\r\nexport function IngredientDetails({\r\n  values,\r\n  setValues,\r\n  mode,\r\n}: IngredientDetailsProps) {\r\n  const handleChange = (event: any) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleRecommendationSelect = (value: string) => {\r\n    setValues({\r\n      ...values,\r\n      recommendation: value,\r\n    });\r\n  };\r\n\r\n  const handleSourceSelect = (value: string) => {\r\n    setValues({\r\n      ...values,\r\n      source: value,\r\n    });\r\n  };\r\n\r\n  const handleManufacturerSelect = (manufacturer: Manufacturer) => {\r\n    setValues({\r\n      ...values,\r\n      manufacturer_name:\r\n        manufacturer?.name || (manufacturer as unknown as string),\r\n      manufacturer,\r\n    });\r\n    // console.log(values);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Ingredient Name\"\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n          required\r\n          value={values.name}\r\n          variant=\"outlined\"\r\n        />\r\n      </Grid>\r\n      {/* <Grid item xs={12}>\r\n        <TextField\r\n          fullWidth\r\n          helperText=\"Please specify a description\"\r\n          label=\"Description\"\r\n          name=\"description\"\r\n          onChange={handleChange}\r\n          required\r\n          value={values.description}\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={4}\r\n        />\r\n      </Grid> */}\r\n      {/* <Grid item xs={6}>\r\n        <EnumSelector\r\n          enumerator={IngredientRecommendation}\r\n          description=\"Status Recommendation\"\r\n          onSelect={handleRecommendationSelect}\r\n          defaultValue={values.recommendation}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <EnumSelector\r\n          enumerator={IngredientSource}\r\n          description=\"Ingredient Source\"\r\n          onSelect={handleSourceSelect}\r\n          defaultValue={values.source}\r\n        />\r\n      </Grid> */}\r\n\r\n      <DialogContentText style={{ marginTop: 20, marginLeft: 12 }}>\r\n        Ingredient Manufacturer\r\n      </DialogContentText>\r\n      <Grid item xs={12}>\r\n        <ManufacturerSelector\r\n          defaultValue={values.manufacturer?.name}\r\n          onSelect={handleManufacturerSelect}\r\n        />\r\n      </Grid>\r\n      {mode === IngredientDialogMode.EDIT && (\r\n        <Grid item xs={12}>\r\n          <ManufacturerDocs\r\n            manufacturerId={values.manufacturer?.id as number}\r\n          />\r\n        </Grid>\r\n      )}\r\n      {/* {(mode === IngredientDialogMode.EDIT && (\r\n        <Grid item xs={12}>\r\n          <ManufacturerDocs\r\n            manufacturerId={values.manufacturer?.id as number}\r\n          />\r\n        </Grid>\r\n      )) || (\r\n        <Grid item xs={12}>\r\n          <Alert severity=\"info\">\r\n            This ingredient has to first be created before any documents can be\r\n            associated with it. Click the <strong>Add Ingredient</strong> button\r\n            to create ingredient.\r\n          </Alert>\r\n        </Grid>\r\n      )} */}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction PaperComponent(props: any) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  ListItemIcon,\r\n  IconButton,\r\n  Box,\r\n  Typography,\r\n  makeStyles,\r\n  LinearProgress,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport SubdirectoryArrowRightIcon from \"@material-ui/icons/SubdirectoryArrowRight\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { insert } from \"../../../reviewer/common/utils\";\r\nimport { Ingredient } from \"../../../reviewer/common/types\";\r\nimport IngredientDialog, { IngredientDialogMode } from \"./IngredientDialog\";\r\n\r\nexport interface IngredientsViewProps {\r\n  productId: number;\r\n}\r\n\r\nexport default function IngredientsView({ productId }: IngredientsViewProps) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n\r\n  const load = () =>\r\n    axios\r\n      .post(`/api/client/product/${productId}/ingredients`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          setIngredients(response.data.reverse());\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve product ingredients.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve product ingredients.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n\r\n  useEffect(() => {\r\n    load();\r\n  }, []);\r\n\r\n  const handleIngredientAdd = (product: Ingredient) => {\r\n    // setIngredients([product, ...ingredients]);\r\n    load();\r\n  };\r\n\r\n  const handleIngredientUpdate = (product: Ingredient, i: number) => {\r\n    // const newIngredients = insert<Ingredient>(ingredients, i, product);\r\n    // setIngredients(newIngredients);\r\n    load();\r\n  };\r\n\r\n  const handleIngredientDelete = (productId: number) => {\r\n    setIngredients(ingredients.filter((p) => p.id != productId));\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* <Box className={classes.header}>\r\n        <Typography variant=\"h4\">Product Ingredients</Typography>\r\n        <IngredientDialog\r\n          productId={productId}\r\n          onIngredientUpdate={handleIngredientAdd}\r\n          mode={IngredientDialogMode.ADD}\r\n        />\r\n      </Box> */}\r\n      {(loading && <CircularProgress />) || (\r\n        <List className={classes.ingredientList}>\r\n          {(ingredients.length &&\r\n            ingredients.map((ingredient: Ingredient, i: number) => (\r\n              <IngredientItem\r\n                key={ingredient.id}\r\n                divider={i != ingredients.length - 1}\r\n                ingredient={ingredient}\r\n                onIngredientUpdate={(ingredient: Ingredient) =>\r\n                  handleIngredientUpdate(ingredient, i)\r\n                }\r\n                onIngredientDelete={handleIngredientDelete}\r\n              />\r\n            ))) || (\r\n            <Alert severity=\"info\">This product has no ingredients.</Alert>\r\n          )}\r\n        </List>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport interface IngredientItemProps {\r\n  divider?: boolean;\r\n  ingredient: Ingredient;\r\n  onIngredientUpdate: (ingredient: Ingredient) => void;\r\n  onIngredientDelete: (ingredientId: number) => void;\r\n  breadcrumbsList?: string[];\r\n}\r\n\r\nexport function IngredientItem({\r\n  divider = false,\r\n  ingredient,\r\n  onIngredientUpdate,\r\n  onIngredientDelete,\r\n  breadcrumbsList,\r\n}: IngredientItemProps) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleIngredientItemClick = () => setOpen(true);\r\n\r\n  const handleIngredientDialogClose = () => setOpen(false);\r\n\r\n  const _onIngredientUpdate = (ingredient: Ingredient) => {\r\n    setOpen(false);\r\n    onIngredientUpdate(ingredient);\r\n  };\r\n\r\n  const handleIngredientDelete = () => {\r\n    const answer = window.confirm(\r\n      \"Are you sure you would like to delete this ingredient?\"\r\n    );\r\n\r\n    if (!answer) return;\r\n\r\n    setLoading(true);\r\n\r\n    axios\r\n      .delete(\"/api/client/ingredient/\" + ingredient.id)\r\n      .then(async (response: any) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          onIngredientDelete(ingredient.id as number);\r\n          enqueueSnackbar(\"Ingredient deleted successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else\r\n          enqueueSnackbar(\r\n            \"Failed to delete ingredient. Contact the developer.\",\r\n            {\r\n              variant: \"error\",\r\n            }\r\n          );\r\n      })\r\n      .catch((e: any) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to delete ingredient. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListItem\r\n        key={ingredient.id}\r\n        // divider={divider}\r\n        button\r\n        onClick={handleIngredientItemClick}\r\n      >\r\n        {loading && <LinearProgress />}\r\n        <ListItemIcon>\r\n          <SubdirectoryArrowRightIcon />\r\n        </ListItemIcon>\r\n        <ListItemText\r\n          primary={`${ingredient.name} (${ingredient.manufacturer?.name})`}\r\n          // secondary={ingredient.manufacturer?.name}\r\n          // secondary={moment(ingredient.date).format(\"DD/MM/YY\")}\r\n        />\r\n        <ListItemSecondaryAction>\r\n          <IconButton edge=\"end\" onClick={handleIngredientDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <IngredientDialog\r\n        mode={IngredientDialogMode.EDIT}\r\n        open={open}\r\n        edit={ingredient}\r\n        onClose={handleIngredientDialogClose}\r\n        onIngredientUpdate={_onIngredientUpdate}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  ingredientList: {\r\n    // overflowY: \"auto\",\r\n    // maxHeight: \"calc(100vh - 239px)\",\r\n    marginLeft: 15,\r\n  },\r\n}));\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { Box, List, CircularProgress } from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport {\r\n  IngredientDocument,\r\n  IngredientDocumentType,\r\n  Document,\r\n} from \"../../../reviewer/common/types\";\r\nimport UploadDocumentListItem from \"../../../reviewer/common/UploadDocumentListItem\";\r\n\r\nexport interface ManufacturerDocsProps {\r\n  manufacturerId: number;\r\n}\r\n\r\nexport default function ManufacturerDocs({ manufacturerId }: ManufacturerDocsProps) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [docs, setDocs] = useState<IngredientDocument[]>([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(`/api/manufacturer/${manufacturerId}/documents`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          setDocs(response.data);\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve ingredient documents.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve ingredient documents.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const setDocumentHandler = (document: Document) => {\r\n    setDocs([...docs, document as IngredientDocument]);\r\n    // console.log(docs);\r\n  };\r\n\r\n  const uploadDocHandler = (\r\n    doc: Document,\r\n    docType: IngredientDocumentType,\r\n    expiresAt: Date\r\n  ) => {\r\n    const formData = new FormData();\r\n    formData.append(\"document\", doc);\r\n    formData.append(\"type\", docType.toString());\r\n    formData.append(\r\n      \"expires_at\",\r\n      moment(expiresAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n    );\r\n\r\n    return axios.post(`/api/manufacturer/${manufacturerId}/document`, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const updateDocHandler = (doc: Document, documentId: number) => {\r\n    const formData = new FormData();\r\n    formData.append(\"document\", doc);\r\n\r\n    return axios.post(`/api/manufacturer/document/${documentId}`, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const deleteDocHandler = (documentId: number) => {\r\n    setDocs(docs.filter((d) => d.id !== documentId));\r\n\r\n    return axios.delete(\"/api/manufacturer/document/\" + documentId);\r\n  };\r\n\r\n  const changeDateHandler = (documentId: number, expiresAt: Date) => {\r\n    const _docs = docs.map((d) => {\r\n      if (d.id !== documentId) return d;\r\n\r\n      d.expires_at = moment(expiresAt).format(\"YYYY-MM-DD HH:mm:ss\");\r\n\r\n      return d;\r\n    });\r\n    setDocs(_docs as IngredientDocument[]);\r\n\r\n    return axios.put(`/api/manufacturer/document/${documentId}/expires-at`, {\r\n      expires_at: moment(expiresAt).format(\"YYYY-MM-DD HH:mm:ss\"),\r\n    });\r\n  };\r\n\r\n  if (loading) return <CircularProgress />;\r\n\r\n  return (\r\n    <Box\r\n      style={{\r\n        maxHeight: \"calc(100vh - 276px)\",\r\n        overflowY: \"auto\",\r\n        overflowX: \"hidden\",\r\n        width: \"100%\",\r\n        // padding: \"20px 0\",\r\n      }}\r\n    >\r\n      <List style={{ width: \"100%\" }}>\r\n        <UploadDocumentListItem\r\n          fileTypeName=\"Halal Certificate/Disclosure Statement\"\r\n          document={\r\n            docs.filter((d) => d.type == \"CERTIFICATE_OR_DISCLOSURE\")[0]\r\n          }\r\n          setDocument={setDocumentHandler}\r\n          uploadHandler={(doc: Document, selectedDate: Date) =>\r\n            uploadDocHandler(\r\n              doc,\r\n              IngredientDocumentType.CERTIFICATE_OR_DISCLOSURE,\r\n              selectedDate\r\n            )\r\n          }\r\n          updateHandler={updateDocHandler}\r\n          deleteHandler={deleteDocHandler}\r\n          dateChangeHandler={changeDateHandler}\r\n          requireExpirationDate={false}\r\n        />\r\n      </List>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport { ShoppingBag as ShoppingBagIcon } from \"react-feather\";\r\n\r\nimport ProductDialog, { ProductDialogMode } from \"./ProductDialog\";\r\nimport IngredientDialog, { IngredientDialogMode } from \"./IngredientDialog\";\r\nimport UploadSpecSheetBtn from \"./UploadSpecSheetBtn\";\r\n\r\nimport {\r\n  Product,\r\n  Ingredient,\r\n  ReviewRequest,\r\n} from \"../../../reviewer/common/types\";\r\nimport AddProductDialog from \"./AddProductDialog\";\r\nimport IngredientsView from \"./IngredientsView\";\r\n\r\ninterface FinishedProductsStepProps {\r\n  reviewRequest: ReviewRequest;\r\n}\r\n\r\n// @TODO handle avatar\r\nconst FinishedProductsStep = ({ reviewRequest }: FinishedProductsStepProps) => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n\r\n  useEffect(() => {\r\n    getProducts();\r\n  }, []);\r\n\r\n  const getProducts = () => {\r\n    setLoading(true);\r\n    axios\r\n      .post(`/api/client/review-request/${reviewRequest.id}/products`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          console.log(response.data);\r\n          setProducts(response.data);\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve products.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve products.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleProductAdd = (product: Product) => {\r\n    setProducts([product, ...products]);\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.stepBox}>\r\n      {loading && <LinearProgress />}\r\n      <Typography\r\n        variant=\"h3\"\r\n        style={{ marginBottom: 30, textAlign: \"center\" }}\r\n      >\r\n        Finished Products\r\n      </Typography>\r\n      <Box\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          marginBottom: 30,\r\n        }}\r\n      >\r\n        <Typography>\r\n          Click on the button at the right to add your products and ingredients\r\n          to this request:\r\n        </Typography>\r\n        <AddProductDialog\r\n          onProductAdd={handleProductAdd}\r\n          reviewRequestId={reviewRequest.id as number}\r\n          facilityId={reviewRequest.facility_id as number}\r\n        />\r\n      </Box>\r\n      <List\r\n        component=\"nav\"\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        // subheader={\r\n        //   <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n        //     Products and Ingredients\r\n        //   </ListSubheader>\r\n        // }\r\n        className={classes.root}\r\n      >\r\n        {products.map((product: Product) => (\r\n          <ProductItem product={product} />\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FinishedProductsStep;\r\n\r\nfunction getSome<T>(array: Array<T>, some: number): Array<T> {\r\n  return array.sort(() => Math.random() - Math.random()).slice(0, some);\r\n}\r\n\r\nexport interface ProductItemProps {\r\n  product: Product;\r\n}\r\n\r\nexport function ProductItem({ product }: ProductItemProps) {\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [specSheet, setSpecSheet] = React.useState<boolean>(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleIngredientAdd = (ingredient: Ingredient) => {\r\n    // cause refresh\r\n    setOpen(!open);\r\n    // setOpen(true);\r\n  };\r\n\r\n  // @TODO make real\r\n  const uploadSpecSheet = () => {\r\n    sleep(2000).then(() => {\r\n      setSpecSheet(!specSheet);\r\n      if (!specSheet)\r\n        enqueueSnackbar(\"Product Spec Sheet uploaded successfully\", {\r\n          variant: \"success\",\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <ShoppingBagIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary={product.name} />\r\n        {/* <Button\r\n          variant={(specSheet && \"contained\") || \"text\"}\r\n          color={(specSheet && \"primary\") || \"default\"}\r\n          startIcon={<CloudUploadIcon />}\r\n          style={{ marginRight: 15 }}\r\n          onClick={uploadSpecSheet}\r\n        >\r\n          Product Spec Sheet\r\n        </Button> */}\r\n        {/* <Tooltip title=\"A product specification sheet is a technical document that outlines the features of a product in detail. It explains and describes the product, what it is, what it does, what its components are and any special features it has. It also provides any other important additional information such as hazard and allergy warnings.\">\r\n          <UploadSpecSheetBtn productId={product.id as number} />\r\n        </Tooltip> */}\r\n        <span style={{ width: 15 }} />\r\n        <IngredientDialog\r\n          reviewRequestId={product.review_request_id as number}\r\n          productId={product.id as number}\r\n          onIngredientUpdate={handleIngredientAdd}\r\n          mode={IngredientDialogMode.ADD}\r\n        />\r\n        <IconButton onClick={handleClick}>\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </IconButton>\r\n      </ListItem>\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          <IngredientsView productId={product.id as number} />\r\n          {/* {ingredients.map((ingredient: Ingredient) => (\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon>\r\n                <SubdirectoryArrowRightIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary={`${ingredient.name} (${\"Demo Manufacturer\"})`}\r\n                // secondary=\"Demo Manufacturer\"\r\n              />\r\n              <IconButton size=\"small\">\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </ListItem>\r\n          ))} */}\r\n        </List>\r\n      </Collapse>\r\n      {/* <ProductDialog\r\n        mode={ProductDialogMode.EDIT}\r\n        open={open}\r\n        edit={product}\r\n        onClose={handleProductDialogClose}\r\n        onProductUpdate={_onProductUpdate}\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  stepBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    // alignItems: \"center\",\r\n  },\r\n  stepBtn: {\r\n    width: 500,\r\n  },\r\n\r\n  root: {},\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  title: {\r\n    margin: theme.spacing(4, 0, 2),\r\n  },\r\n\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction sleep(time: number) {\r\n  return new Promise((resolve) => setTimeout(resolve, time));\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAeqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAhIA;AAKA;;;AALA;AAiIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAtBA;AACA;AAsBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AADA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrNA;AACA;AACA;AAeA;AACA;AACA;AAGA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAGA;AADA;AAIA;AACA;AAEA;AACA;AACA;AA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","sourceRoot":""}