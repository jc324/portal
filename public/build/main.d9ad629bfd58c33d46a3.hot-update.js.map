{"version":3,"file":"main.d9ad629bfd58c33d46a3.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/FacilityStepDoc.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { Box, List, CircularProgress } from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport {\r\n  FacilityDocument,\r\n  FacilityDocumentType,\r\n  Document,\r\n} from \"../../../reviewer/common/types\";\r\nimport UploadDocumentListItem from \"../../../reviewer/common/UploadDocumentListItem\";\r\n\r\nexport interface FacilityStepDocProps {\r\n  facilityId: number;\r\n  type: FacilityDocumentType;\r\n  setGreenLight?: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport default function FacilityStepDoc({\r\n  facilityId,\r\n  type,\r\n  setGreenLight,\r\n}: FacilityStepDocProps) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [docs, setDocs] = useState<FacilityDocument[]>([]);\r\n  const isEmpty = !!docs.filter((d) => d.type === \"FLOWCHART_OF_PROCESSING\")\r\n    .length;\r\n\r\n  useEffect(() => {\r\n    if (setGreenLight) setGreenLight(isEmpty);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(`/api/client/facility/${facilityId}/documents`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          setDocs(response.data);\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve facility documents.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve facility documents.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const setDocumentHandler = (document: Document) => {\r\n    setDocs([...docs, document as FacilityDocument]);\r\n    console.log(docs);\r\n  };\r\n\r\n  const uploadDocHandler = (doc: Document, expiresAt: Date) => {\r\n    const formData = new FormData();\r\n    formData.append(\"document\", doc);\r\n    formData.append(\"type\", type.toString());\r\n    formData.append(\r\n      \"expires_at\",\r\n      moment(expiresAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n    );\r\n\r\n    return axios.post(`/api/client/facility/${facilityId}/document`, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const updateDocHandler = (doc: Document, documentId: number) => {\r\n    const formData = new FormData();\r\n    formData.append(\"document\", doc);\r\n\r\n    return axios.post(`/api/client/facility/document/${documentId}`, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const deleteDocHandler = (documentId: number) => {\r\n    setDocs(docs.filter((d) => d.id !== documentId));\r\n\r\n    return axios.delete(\"/api/client/facility/document/\" + documentId);\r\n  };\r\n\r\n  const changeDateHandler = (documentId: number, expiresAt: Date) => {\r\n    const _docs = docs.map((d) => {\r\n      if (d.id !== documentId) return d;\r\n\r\n      d.expires_at = moment(expiresAt).format(\"YYYY-MM-DD HH:mm:ss\");\r\n\r\n      return d;\r\n    });\r\n    setDocs(_docs as FacilityDocument[]);\r\n\r\n    return axios.put(`/api/client/facility/document/${documentId}/expires-at`, {\r\n      expires_at: moment(expiresAt).format(\"YYYY-MM-DD HH:mm:ss\"),\r\n    });\r\n  };\r\n\r\n  if (loading) return <CircularProgress />;\r\n\r\n  return (\r\n    <Box\r\n      style={{\r\n        maxHeight: \"calc(100vh - 276px)\",\r\n        overflowY: \"auto\",\r\n        overflowX: \"hidden\",\r\n        width: \"100%\",\r\n        // padding: \"20px 0\",\r\n      }}\r\n    >\r\n      <List style={{ width: \"100%\" }}>\r\n        <UploadDocumentListItem\r\n          fileTypeName=\"Upload Document\"\r\n          document={docs.filter((d) => d.type == type.toString())[0]}\r\n          setDocument={setDocumentHandler}\r\n          uploadHandler={(doc: Document, selectedDate: Date) =>\r\n            uploadDocHandler(doc, selectedDate)\r\n          }\r\n          updateHandler={updateDocHandler}\r\n          deleteHandler={deleteDocHandler}\r\n          dateChangeHandler={changeDateHandler}\r\n          requireExpirationDate={false}\r\n        />\r\n      </List>\r\n    </Box>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAOA;AAQA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAxHA;AAKA;;;AALA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}