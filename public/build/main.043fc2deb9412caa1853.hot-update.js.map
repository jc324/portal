{"version":3,"file":"main.043fc2deb9412caa1853.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/common/auth/ResetPasswordView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport { parse as parseQuery } from \"query-string\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport Page from \"../../../components/Page\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nexport default function PasswordResetView() {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [statusMessage, setStatusMessage] = useState<string>(\"\");\r\n  const { token, email } = parseQuery(window.location.search);\r\n\r\n  useEffect(() => {\r\n    // send them to the login screen\r\n    if (!token || !email) navigate(\"/login\", { replace: true });\r\n  }, []);\r\n\r\n  const handleResetPasswordRequest = (values: {\r\n    password: string;\r\n    password_confirmation: string;\r\n  }) => {\r\n    setLoading(true);\r\n    axios\r\n      .post(\"/reset-password\", {\r\n        token,\r\n        email,\r\n        password: values.password,\r\n        password_confirmation: values.password_confirmation,\r\n      })\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        console.log(response);\r\n        if (response.status == 200 || response.status == 201) {\r\n          setStatusMessage(response.data.message);\r\n          enqueueSnackbar(\"Password reset successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          setStatusMessage(response.data.message);\r\n          enqueueSnackbar(\"Password reset failed.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e.response);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Password reset failed.\", {\r\n          variant: \"error\",\r\n        });\r\n\r\n        if (!e.response.data.errors) return;\r\n        let errorMessage = Object.values(e.response.data.errors)\r\n          .map((v: any) => v[0])\r\n          .join(\" \");\r\n        setStatusMessage(errorMessage);\r\n      });\r\n  };\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <Page className={classes.root} title=\"Login\">\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"sm\">\r\n          {loading && <LinearProgress />}\r\n          <Paper style={{ padding: 20, paddingTop: 30 }}>\r\n            <Formik\r\n              initialValues={{ password: \"\", password_confirmation: \"\" }}\r\n              validationSchema={Yup.object().shape({\r\n                password: Yup.string()\r\n                  .min(8)\r\n                  .max(255)\r\n                  .required(\"New password is a required field\"),\r\n                password_confirmation: Yup.string().oneOf(\r\n                  [Yup.ref(\"password\")],\r\n                  \"Passwords must match\"\r\n                ),\r\n              })}\r\n              onSubmit={handleResetPasswordRequest}\r\n            >\r\n              {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                isSubmitting,\r\n                touched,\r\n                values,\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                  <Box mb={3} style={{ paddingBottom: 10 }}>\r\n                    <Typography\r\n                      color=\"textPrimary\"\r\n                      variant=\"h2\"\r\n                      align=\"center\"\r\n                      style={{ marginBottom: 7 }}\r\n                    >\r\n                      Reset Password\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      variant=\"body2\"\r\n                      align=\"center\"\r\n                    >\r\n                      {(statusMessage && statusMessage) ||\r\n                        \"Please enter and confirm your new password.\"}\r\n                    </Typography>\r\n                  </Box>\r\n                  {!statusMessage && (\r\n                    <>\r\n                      <TextField\r\n                        error={Boolean(touched.password && errors.password)}\r\n                        fullWidth\r\n                        helperText={touched.password && errors.password}\r\n                        label=\"New Password\"\r\n                        margin=\"normal\"\r\n                        name=\"password\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        type=\"password\"\r\n                        value={values.password}\r\n                        variant=\"outlined\"\r\n                      />\r\n                      <TextField\r\n                        error={Boolean(\r\n                          touched.password_confirmation &&\r\n                            errors.password_confirmation\r\n                        )}\r\n                        fullWidth\r\n                        helperText={\r\n                          touched.password_confirmation &&\r\n                          errors.password_confirmation\r\n                        }\r\n                        label=\"Confirm New Password\"\r\n                        margin=\"normal\"\r\n                        name=\"password_confirmation\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        type=\"password\"\r\n                        value={values.password_confirmation}\r\n                        variant=\"outlined\"\r\n                      />\r\n                      <Box my={2}>\r\n                        <Button\r\n                          color=\"primary\"\r\n                          disabled={isSubmitting}\r\n                          fullWidth\r\n                          size=\"large\"\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                        >\r\n                          Reset Password\r\n                        </Button>\r\n                      </Box>\r\n                    </>\r\n                  )}\r\n                  <Typography color=\"textSecondary\" variant=\"body1\">\r\n                    Back to{\" \"}\r\n                    <Link component={RouterLink} to=\"/login\" variant=\"h6\">\r\n                      Log In\r\n                    </Link>\r\n                  </Typography>\r\n                </form>\r\n              )}\r\n            </Formik>\r\n          </Paper>\r\n        </Container>\r\n      </Box>\r\n    </Page>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // @ts-ignore\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: \"100%\",\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n}));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AALA;AAUA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzGA;AAqHA;AACA;AA7KA;AACA;;;AADA;AA8KA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}