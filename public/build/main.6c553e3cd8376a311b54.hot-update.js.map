{"version":3,"file":"main.6c553e3cd8376a311b54.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/IngredientDialog.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Slide,\r\n  Paper,\r\n  LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport Draggable from \"react-draggable\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport { Ingredient, Manufacturer } from \"../../../reviewer/common/types\";\r\nimport ManufacturerDocs from \"./ManufacturerDocs\";\r\nimport ManufacturerSelector from \"../../../reviewer/clients/client/ManufacturerSelector\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst defaults: Ingredient = {\r\n  id: null,\r\n  review_request_id: null,\r\n  client_id: null,\r\n  product_id: null,\r\n  name: \"\",\r\n  manufacturer: null,\r\n  description: \"\",\r\n  recommendation: \"\",\r\n  source: \"\",\r\n};\r\n\r\nexport enum IngredientDialogMode {\r\n  EDIT,\r\n  ADD,\r\n}\r\n\r\nexport interface IngredientDialogProps {\r\n  onIngredientUpdate: (product: Ingredient) => void;\r\n  productId?: number;\r\n  reviewRequestId?: number;\r\n  mode: IngredientDialogMode;\r\n  open?: boolean;\r\n  onClose?: () => void;\r\n  edit?: Ingredient;\r\n}\r\n\r\nexport default function IngredientDialog({\r\n  onIngredientUpdate,\r\n  reviewRequestId,\r\n  productId,\r\n  mode,\r\n  open = false,\r\n  onClose,\r\n  edit,\r\n}: IngredientDialogProps) {\r\n  if (edit) edit.manufacturer_name = edit.manufacturer?.name;\r\n\r\n  const [_open, _setOpen] = React.useState(false); // internal\r\n  const [values, setValues] = useState<Ingredient>(\r\n    (mode === IngredientDialogMode.ADD && defaults) || (edit as Ingredient)\r\n  );\r\n  const ingredientId = edit?.id as number;\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // inject appropriate facility id\r\n  values.product_id = productId as number;\r\n\r\n  const addIngredientHandler = (ingredient: Ingredient) => {\r\n    // inject\r\n    values.review_request_id = reviewRequestId as number;\r\n    console.log(ingredient);\r\n    setLoading(true);\r\n    axios\r\n      .put(`/api/client/ingredient`, ingredient)\r\n      .then(async (response) => {\r\n        console.log(response.data);\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          onIngredientUpdate(response.data);\r\n          setValues(defaults);\r\n          _setOpen(false);\r\n          enqueueSnackbar(\"Ingredient added successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to add ingredient. Contact the developer.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to add ingredient. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const updateIngredientHandler = (ingredient: Ingredient) => {\r\n    // if (mode === IngredientDialogMode.ADD)\r\n    //   ingredient.manufacturer_name = ingredient.manufacturer?.name;\r\n    setLoading(true);\r\n    axios\r\n      .put(`/api/client/ingredient/${ingredient.id}`, ingredient)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          onIngredientUpdate(response.data);\r\n          _setOpen(false);\r\n          enqueueSnackbar(\"Ingredient updated successfully.\", {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\r\n            \"Failed to update ingredient. Contact the developer.\",\r\n            {\r\n              variant: \"error\",\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\r\n          \"Failed to update ingredient. Check your network connection and try again.\",\r\n          {\r\n            variant: \"error\",\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  const handleIngredientUpdate = () => {\r\n    if (mode === IngredientDialogMode.ADD) addIngredientHandler(values);\r\n    else updateIngredientHandler(values);\r\n    // _setOpen(false);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    _setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    _setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {mode === IngredientDialogMode.ADD && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          startIcon={<AddIcon />}\r\n          style={{ marginRight: 15 }}\r\n          onClick={handleClickOpen}\r\n        >\r\n          Ingredient\r\n        </Button>\r\n      )}\r\n      <Dialog\r\n        keepMounted\r\n        open={(mode === IngredientDialogMode.ADD && _open) || open}\r\n        onClose={(mode === IngredientDialogMode.ADD && handleClose) || onClose}\r\n        TransitionComponent={Transition}\r\n        maxWidth=\"sm\"\r\n        PaperComponent={PaperComponent}\r\n        aria-labelledby=\"draggable-dialog-title\"\r\n      >\r\n        {loading && <LinearProgress />}\r\n        <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n          <Typography variant=\"h4\">\r\n            {(mode === IngredientDialogMode.ADD && \"Add\") || \"Edit\"} Ingredient\r\n          </Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {(mode === IngredientDialogMode.ADD &&\r\n              \"Fill out this form to add a new ingredient to this product.\") ||\r\n              \"Fill out this form to update this ingredient.\"}\r\n          </DialogContentText>\r\n          <IngredientDetails\r\n            values={values}\r\n            setValues={setValues}\r\n            mode={mode}\r\n          />\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleIngredientUpdate}\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n          >\r\n            {(mode === IngredientDialogMode.ADD && \"Add\") || \"Update\"}{\" \"}\r\n            Ingredient\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport interface IngredientDetailsProps {\r\n  values: Ingredient;\r\n  setValues: React.Dispatch<React.SetStateAction<Ingredient>>;\r\n  mode?: IngredientDialogMode;\r\n}\r\n\r\nexport function IngredientDetails({\r\n  values,\r\n  setValues,\r\n  mode,\r\n}: IngredientDetailsProps) {\r\n  const handleChange = (event: any) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleRecommendationSelect = (value: string) => {\r\n    setValues({\r\n      ...values,\r\n      recommendation: value,\r\n    });\r\n  };\r\n\r\n  const handleSourceSelect = (value: string) => {\r\n    setValues({\r\n      ...values,\r\n      source: value,\r\n    });\r\n  };\r\n\r\n  const handleManufacturerSelect = (manufacturer: Manufacturer) => {\r\n    setValues({\r\n      ...values,\r\n      manufacturer_name:\r\n        manufacturer?.name || (manufacturer as unknown as string),\r\n      manufacturer,\r\n    });\r\n    // console.log(values);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Ingredient Name\"\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n          required\r\n          value={values.name}\r\n          variant=\"outlined\"\r\n        />\r\n      </Grid>\r\n      {/* <Grid item xs={12}>\r\n        <TextField\r\n          fullWidth\r\n          helperText=\"Please specify a description\"\r\n          label=\"Description\"\r\n          name=\"description\"\r\n          onChange={handleChange}\r\n          required\r\n          value={values.description}\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={4}\r\n        />\r\n      </Grid> */}\r\n      {/* <Grid item xs={6}>\r\n        <EnumSelector\r\n          enumerator={IngredientRecommendation}\r\n          description=\"Status Recommendation\"\r\n          onSelect={handleRecommendationSelect}\r\n          defaultValue={values.recommendation}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <EnumSelector\r\n          enumerator={IngredientSource}\r\n          description=\"Ingredient Source\"\r\n          onSelect={handleSourceSelect}\r\n          defaultValue={values.source}\r\n        />\r\n      </Grid> */}\r\n\r\n      <DialogContentText style={{ marginTop: 20, marginLeft: 12 }}>\r\n        Ingredient Manufacturer\r\n      </DialogContentText>\r\n      <Grid item xs={12}>\r\n        <ManufacturerSelector\r\n          defaultValue={values.manufacturer?.name}\r\n          onSelect={handleManufacturerSelect}\r\n        />\r\n      </Grid>\r\n      {mode === IngredientDialogMode.EDIT && (\r\n        <Grid item xs={12}>\r\n          <ManufacturerDocs\r\n            manufacturerId={values.manufacturer?.id as number}\r\n          />\r\n        </Grid>\r\n      )}\r\n      {/* {(mode === IngredientDialogMode.EDIT && (\r\n        <Grid item xs={12}>\r\n          <ManufacturerDocs\r\n            manufacturerId={values.manufacturer?.id as number}\r\n          />\r\n        </Grid>\r\n      )) || (\r\n        <Grid item xs={12}>\r\n          <Alert severity=\"info\">\r\n            This ingredient has to first be created before any documents can be\r\n            associated with it. Click the <strong>Add Ingredient</strong> button\r\n            to create ingredient.\r\n          </Alert>\r\n        </Grid>\r\n      )} */}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction PaperComponent(props: any) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n"],"mappings":"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","sourceRoot":""}