{"version":3,"file":"main.bc2f822eaae762189424.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/Step_08.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport HelpIcon from \"@material-ui/icons/Help\";\r\nimport { ShoppingBag as ShoppingBagIcon } from \"react-feather\";\r\n\r\nimport ProductDialog, { ProductDialogMode } from \"./ProductDialog\";\r\nimport IngredientDialog, { IngredientDialogMode } from \"./IngredientDialog\";\r\nimport UploadSpecSheetBtn from \"./UploadSpecSheetBtn\";\r\nimport PromptDialog from \"../../../reviewer/common/PromptDialog\";\r\n\r\nimport {\r\n  Product,\r\n  Ingredient,\r\n  ReviewRequest,\r\n} from \"../../../reviewer/common/types\";\r\nimport AddProductDialog from \"./AddProductDialog\";\r\nimport IngredientsView from \"./IngredientsView\";\r\n\r\ninterface FinishedProductsStepProps {\r\n  reviewRequest: ReviewRequest;\r\n}\r\n\r\n// @TODO handle avatar\r\nconst FinishedProductsStep = ({ reviewRequest }: FinishedProductsStepProps) => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [promptOpen, setPromptOpen] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    getProducts();\r\n  }, []);\r\n\r\n  const getProducts = () => {\r\n    setLoading(true);\r\n    axios\r\n      .post(`/api/client/review-request/${reviewRequest.id}/products`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          console.log(response.data);\r\n          setProducts(response.data);\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve products.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve products.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleProductAdd = (product: Product) => {\r\n    setProducts([product, ...products]);\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.stepBox}>\r\n      {loading && <LinearProgress />}\r\n      <PromptDialog\r\n        open={promptOpen}\r\n        onOk={() => setPromptOpen(false)}\r\n        onCancel={() => setPromptOpen(false)}\r\n        title=\"Raw Material Submission Instructions\"\r\n        message=\"Provide documented information pertaining to all raw materials (RM's) related to the halal products in consideration.\r\n\r\n\r\n\r\nAll of the following items are considered raw materials:\r\n\r\n\r\n\r\nAny ingredients used to produce the halal product.\r\nPackaging material that comes into direct contact with the halal product.\r\nCleaning agents used to sanitize production tools, utensils, or surfaces that are in direct contact with the halal product.\r\nFeed for livestock, or any living creatures related to the halal product.\r\n\r\n\r\nYou will be prompted to provide the following additional information:\r\nThe correlating raw material manufacturer (RMM). RMM’s are the producers of the ingredients that make up the halal product. This may not be the same as the company supplying the product to your facility.\r\nHalal Certificates/Disclosure Statements. All RMM’s must be halal certified, or provide a halal disclosure statement which can be downloaded by clicking the 'Download Halal Disclosure Statement' button. The Halal disclosure statement is a written testimony that the RM’s used in the halal product do not come into contact with, and do not contain contaminants (See disclosure statement template for the full list of contaminants).\r\n\r\n\r\n*Note: Items such as lettuce, tomatoes, and onions that have not been processed or altered do not require halal disclosure statements.\"\r\n      />\r\n      <Typography\r\n        variant=\"h3\"\r\n        style={{ marginBottom: 30, textAlign: \"center\" }}\r\n      >\r\n        Finished Products{\" \"}\r\n        <IconButton edge=\"end\" onClick={() => setPromptOpen(true)}>\r\n          <HelpIcon />\r\n        </IconButton>\r\n      </Typography>\r\n      <Box\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          marginBottom: 30,\r\n        }}\r\n      >\r\n        <Typography>\r\n          Click on the button at the right to add your products and ingredients\r\n          to this request:\r\n        </Typography>\r\n        <AddProductDialog\r\n          onProductAdd={handleProductAdd}\r\n          reviewRequestId={reviewRequest.id as number}\r\n          facilityId={reviewRequest.facility_id as number}\r\n        />\r\n      </Box>\r\n      <List\r\n        component=\"nav\"\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        // subheader={\r\n        //   <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n        //     Products and Ingredients\r\n        //   </ListSubheader>\r\n        // }\r\n        className={classes.root}\r\n      >\r\n        {products.map((product: Product) => (\r\n          <ProductItem product={product} />\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FinishedProductsStep;\r\n\r\nfunction getSome<T>(array: Array<T>, some: number): Array<T> {\r\n  return array.sort(() => Math.random() - Math.random()).slice(0, some);\r\n}\r\n\r\nexport interface ProductItemProps {\r\n  product: Product;\r\n}\r\n\r\nexport function ProductItem({ product }: ProductItemProps) {\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [specSheet, setSpecSheet] = React.useState<boolean>(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleIngredientAdd = (ingredient: Ingredient) => {\r\n    // cause refresh\r\n    setOpen(!open);\r\n    // setOpen(true);\r\n  };\r\n\r\n  // @TODO make real\r\n  const uploadSpecSheet = () => {\r\n    sleep(2000).then(() => {\r\n      setSpecSheet(!specSheet);\r\n      if (!specSheet)\r\n        enqueueSnackbar(\"Product Spec Sheet uploaded successfully\", {\r\n          variant: \"success\",\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <ShoppingBagIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary={product.name} />\r\n        {/* <Button\r\n          variant={(specSheet && \"contained\") || \"text\"}\r\n          color={(specSheet && \"primary\") || \"default\"}\r\n          startIcon={<CloudUploadIcon />}\r\n          style={{ marginRight: 15 }}\r\n          onClick={uploadSpecSheet}\r\n        >\r\n          Product Spec Sheet\r\n        </Button> */}\r\n        <UploadSpecSheetBtn productId={product.id as number} />\r\n        <span style={{ width: 15 }} />\r\n        <IngredientDialog\r\n          reviewRequestId={product.review_request_id as number}\r\n          productId={product.id as number}\r\n          onIngredientUpdate={handleIngredientAdd}\r\n          mode={IngredientDialogMode.ADD}\r\n        />\r\n        <IconButton onClick={handleClick}>\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </IconButton>\r\n      </ListItem>\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          <IngredientsView productId={product.id as number} />\r\n          {/* {ingredients.map((ingredient: Ingredient) => (\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon>\r\n                <SubdirectoryArrowRightIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary={`${ingredient.name} (${\"Demo Manufacturer\"})`}\r\n                // secondary=\"Demo Manufacturer\"\r\n              />\r\n              <IconButton size=\"small\">\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </ListItem>\r\n          ))} */}\r\n        </List>\r\n      </Collapse>\r\n      {/* <ProductDialog\r\n        mode={ProductDialogMode.EDIT}\r\n        open={open}\r\n        edit={product}\r\n        onClose={handleProductDialogClose}\r\n        onProductUpdate={_onProductUpdate}\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  stepBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    // alignItems: \"center\",\r\n  },\r\n  stepBtn: {\r\n    width: 500,\r\n  },\r\n\r\n  root: {},\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  title: {\r\n    margin: theme.spacing(4, 0, 2),\r\n  },\r\n\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction sleep(time: number) {\r\n  return new Promise((resolve) => setTimeout(resolve, time));\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAPA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAjHA;AACA;;;AADA;AAknFA;AAGA;;;AAHA;AAoFA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAIA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AACA;AADA;AAnBA;AACA;AAuBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}