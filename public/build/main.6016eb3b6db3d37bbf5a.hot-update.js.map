{"version":3,"file":"main.6016eb3b6db3d37bbf5a.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/UploadSpecSheetBtn.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { Box, List, CircularProgress } from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoadingButton from \"../../../reviewer/common/LoadingButton\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport { MAX_ALLOWED_SIZE } from \"../../../../config\";\r\nimport {\r\n  ProductDocument,\r\n  ProductDocumentType,\r\n  Document,\r\n} from \"../../../reviewer/common/types\";\r\n\r\nexport interface UploadSpecSheetBtnProps {\r\n  productId: number;\r\n}\r\n\r\nexport default function UploadSpecSheetBtn({\r\n  productId,\r\n}: UploadSpecSheetBtnProps) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [doc, setDoc] = useState<ProductDocument | null>(null);\r\n  const inputRef = useRef(null);\r\n  const updateInputRef = useRef(null);\r\n  const documentCopy = (document && Object.assign({}, document)) || null;\r\n  // const [file, setFile] = useState<Document | null>(documentCopy);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(`/api/client/product/${productId}/documents`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          console.log(response.data);\r\n          setDoc(response.data[0]);\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve product spec sheet.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve product spec sheet.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const handleClick = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleDocumentUploadButton = () => {\r\n    // @ts-ignore\r\n    if (inputRef) inputRef.current.click();\r\n  };\r\n\r\n  const handleDocumentUpdateButton = () => {\r\n    // @ts-ignore\r\n    if (inputRef) updateInputRef.current.click();\r\n  };\r\n\r\n  // const setDocumentHandler = (document: Document) => {\r\n  //   setDoc(document as ProductDocument);\r\n  //   console.log(doc);\r\n  // };\r\n\r\n  // const updateDocHandler = (doc: Document, documentId: number) => {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"document\", doc);\r\n\r\n  //   return axios.post(`/api/client/product/document/${documentId}`, formData, {\r\n  //     headers: {\r\n  //       \"Content-Type\": \"multipart/form-data\",\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // const deleteDocHandler = (documentId: number) => {\r\n  //   setDoc(doc.filter((d) => d.id !== documentId));\r\n\r\n  //   return axios.delete(\"/api/client/product/document/\" + documentId);\r\n  // };\r\n\r\n  const handleDocumentUpload = (e: any) => {\r\n    const _doc = e.target.files[0] as Document;\r\n\r\n    if (!_doc) return;\r\n\r\n    if (_doc.size > MAX_ALLOWED_SIZE) {\r\n      alert(\"File exceeds the maximum allowed size of 10 MB.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const formData = new FormData();\r\n    formData.append(\"document\", _doc);\r\n    formData.append(\"type\", ProductDocumentType.SPEC_SHEETS.toString());\r\n\r\n    axios\r\n      .post(`/api/client/product/${productId}/document`, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          // console.log(response.data);\r\n          // setDoc(response.data);\r\n          // setDocument(response.data);\r\n          setDoc(response.data);\r\n          enqueueSnackbar(`Uploaded product spec successfully.`, {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(`Product spec sheet upload failed.`, {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(`Product spec sheet upload failed.`, {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  if (loading) return <CircularProgress />;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"file\"\r\n        name=\"file\"\r\n        id={Math.random().toString()}\r\n        accept=\"application/msword, application/pdf\"\r\n        data-title=\"Upload\"\r\n        // multiple\r\n        // data-multiple-caption=\"{count} files selected\"\r\n        onChange={handleDocumentUpload}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      {/* <input\r\n        ref={updateInputRef}\r\n        type=\"file\"\r\n        name=\"updatedFile\"\r\n        id={Math.random().toString()}\r\n        accept=\"application/msword, application/pdf\"\r\n        data-title=\"Upload\"\r\n        onChange={handleUpdateDocument}\r\n        style={{ display: \"none\" }}\r\n      /> */}\r\n      <Tooltip title=\"A product specification sheet is a technical document that outlines the features of a product in detail. It explains and describes the product, what it is, what it does, what its components are and any special features it has. It also provides any other important additional information such as hazard and allergy warnings.\">\r\n        <LoadingButton\r\n          loading={loading}\r\n          done={doc != null}\r\n          onClick={handleDocumentUploadButton}\r\n          startIcon={<CloudUploadIcon />}\r\n          variant=\"contained\"\r\n        >\r\n          Product Spec Sheet\r\n        </LoadingButton>\r\n      </Tooltip>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AASA;AACA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA/JA;AAGA;;;AAHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}