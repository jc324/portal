{"version":3,"file":"main.4570de345dcb131cd2be.hot-update.js","sources":["C:/Users/baeyun/Documents/bukharim96/HWW/halalwatchworld-portal/src/views/client/requests/request/UploadCertOrDisclosureBtn.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { Box, List, CircularProgress, Tooltip } from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoadingButton from \"../../../reviewer/common/LoadingButton\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\n\r\nimport { MAX_ALLOWED_SIZE } from \"../../../../config\";\r\nimport {\r\n  IngredientDocument,\r\n  IngredientDocumentType,\r\n  Document,\r\n} from \"../../../reviewer/common/types\";\r\n\r\nexport interface UploadCertOrDisclosureBtnProps {\r\n  manufacturerId: number;\r\n}\r\n\r\nexport default function UploadCertOrDisclosureBtn({\r\n  manufacturerId,\r\n}: UploadCertOrDisclosureBtnProps) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [doc, setDoc] = useState<IngredientDocument | null>(null);\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(`/api/manufacturer/${manufacturerId}/documents`)\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          console.log(response.data);\r\n          setDoc(response.data[0]);\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(\"Failed to retrieve manufacturer spec sheet.\", {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Failed to retrieve manufacturer spec sheet.\", {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const handleDocumentUploadButton = () => {\r\n    if (doc) return; // don't allow replacing\r\n    // @ts-ignore\r\n    if (inputRef) inputRef.current.click();\r\n  };\r\n\r\n  const handleDocumentUpload = (e: any) => {\r\n    const _doc = e.target.files[0] as Document;\r\n\r\n    if (!_doc) return;\r\n\r\n    if (_doc.size > MAX_ALLOWED_SIZE) {\r\n      alert(\"File exceeds the maximum allowed size of 10 MB.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const formData = new FormData();\r\n    formData.append(\"document\", _doc);\r\n    formData.append(\r\n      \"type\",\r\n      IngredientDocumentType.CERTIFICATE_OR_DISCLOSURE.toString()\r\n    );\r\n\r\n    axios\r\n      .post(`/api/manufacturer/${manufacturerId}/document`, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then(async (response) => {\r\n        setLoading(false);\r\n        if (response.status == 200 || response.status == 201) {\r\n          // console.log(response.data);\r\n          // setDoc(response.data);\r\n          // setDocument(response.data);\r\n          setDoc(response.data);\r\n          enqueueSnackbar(`Uploaded document successfully.`, {\r\n            variant: \"success\",\r\n          });\r\n        } else {\r\n          console.log(response);\r\n          enqueueSnackbar(`Document upload failed.`, {\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n        enqueueSnackbar(`Document upload failed.`, {\r\n          variant: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  if (loading) return <CircularProgress />;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"file\"\r\n        name=\"file\"\r\n        id={Math.random().toString()}\r\n        accept=\"application/msword, application/pdf\"\r\n        data-title=\"Upload\"\r\n        // multiple\r\n        // data-multiple-caption=\"{count} files selected\"\r\n        onChange={handleDocumentUpload}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      {/* <input\r\n        ref={updateInputRef}\r\n        type=\"file\"\r\n        name=\"updatedFile\"\r\n        id={Math.random().toString()}\r\n        accept=\"application/msword, application/pdf\"\r\n        data-title=\"Upload\"\r\n        onChange={handleUpdateDocument}\r\n        style={{ display: \"none\" }}\r\n      /> */}\r\n      {/* <Tooltip title=\"A manufacturer specification sheet is a technical document that outlines the features of a manufacturer in detail. It explains and describes the manufacturer, what it is, what it does, what its components are and any special features it has. It also provides any other important additional information such as hazard and allergy warnings.\"> */}\r\n      <LoadingButton\r\n        loading={loading}\r\n        done={doc != null}\r\n        onClick={handleDocumentUploadButton}\r\n        startIcon={<CloudUploadIcon />}\r\n        variant=\"contained\"\r\n      >\r\n        Certificate/Disclosure\r\n      </LoadingButton>\r\n      {/* </Tooltip> */}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AADA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AASA;AACA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAhIA;AAGA;;;AAHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}